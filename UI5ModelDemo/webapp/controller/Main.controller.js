sap.ui.define([
	"oft/controller/BaseController",
	"oft/model/models",
	"oft/utils/lifesaver"
], function(Controller, oSpidy, lifeSaver) {
	"use strict";
	return Controller.extend("oft.controller.Main", {
		formatter: lifeSaver,
		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf oft.view.Main
		 */
		//oCore: this.getCore(),
		// getModel: function(){
		// 	return sap.ui.getCore().getModel();	
		// },
		// getCore: function(){
		// 	return sap.ui.getCore();	
		// },
		
		onInit: function() {
			//Calling the reuse method to create model
			var oModel = oSpidy.createMyModel("model/mockData/spiderman.json");
			var oModelSuper = oSpidy.createMyModel("model/mockData/superman.json");
			var oModelXML = oSpidy.createMyXMLModel("model/mockData/sampleData.xml");
			var oResource = oSpidy.createResourceModel();
			
			this.getCore().setModel(oResource,"i18n");
			//oModel.setDefaultBindingMode(sap.ui.model.BindingMode.OneWay);
			//Step 3: Make the model known to the application
			this.getCore().setModel(oModelXML);
			this.getCore().setModel(oModelSuper, "super"); //this.getView().setModel(oModel);
		},
		onRowSelect: function(oAnubhav){
			//Step 1: Find the address (rowContext) of selected record : event Object	
			var elementAddress = oAnubhav.getParameter("rowContext");
			//Step 2: bind the simple form control with this address - bindElement
			var oSimpleForm = this.getView().byId("idSimple");
			oSimpleForm.bindElement(elementAddress.sPath);
		},
		onMagic: function() {
			//Get the control object -- binding using code
			var oSal = this.getView().byId("idSal");
			//syntax 1
			oSal.bindValue("/empStr/salary");
			var oCurr = this.getView().byId("idCurr");
			//syntax 2
			oCurr.bindProperty("value", "/empStr/currency");
		},
		modelType: "xml",
		onFlip: function() {
				debugger;
				var oModel = this.getModel();
				var oModelSuper = this.getCore().getModel("super");
				var oTable = this.getView().byId("idTable");
				this.getCore().setModel(oModel, "super");
				this.getCore().setModel(oModelSuper);
				
				if ( this.modelType === "xml" )
				{
					this.modelType = "json";
					//get the table object
					//change aggregation binding of rows to json path
					oTable.bindRows("/empTab");
				}else{
					this.modelType = "xml";
					//get the table object
					//change aggregation binding of rows to xml path
					oTable.bindRows("/empTab/row");
				}
			},
		onInsert: function(){
			var oModel = this.getModel();
			var empStr = oModel.getProperty("/empStr");
			var itab = oModel.getProperty("/empTab");
			itab.push(empStr);
			oModel.setProperty("/empTab", itab);
		},
			/**
			 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
			 * (NOT before the first rendering! onInit() is used for that one!).
			 * @memberOf oft.view.Main
			 */
			//	onBeforeRendering: function() {
			//
			//	},
			/**
			 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
			 * This hook is the same one that SAPUI5 controls get after being rendered.
			 * @memberOf oft.view.Main
			 */
			onAfterRendering: function() {
					var sId = this.getView().byId("idTable").getId();
					$("#" + sId).fadeOut().fadeIn(10000);
			}
			/**
			 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
			 * @memberOf oft.view.Main
			 */
			//	onExit: function() {
			//
			//	}
			,
		/**
		 *@memberOf oft.controller.Main
		 */
		onZangoora: function() {
			//This code was generated by the layout editor.
			//alert("this method was created with layout editor");
			var oModel = this.getCore().getModel();
			oModel.setProperty("/empStr/mario", false);
		}
	});
});